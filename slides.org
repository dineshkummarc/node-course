#+ -*- ispell-local-dictionary: "francais"; -*-
#+Title: Node et technologies HTML5
#+Author: Florent Marchand de Kerchove\\Merwan Achibet
#+Email: fmdkdd@gmail.com
#+Date: 9 novembre 2011
#+Language: fr

## Supplementary info.
#+Beamer_Header_Extra: \institute{UFR sciences et techniques\\Université du Havre}

## Beamer slideshow.
#+LATEX_CMD: lualatex
#+LaTeX_CLASS: beamer
#+OPTIONS: toc:nil
#+Beamer_frame_level: 3

## Structure
#+Latex_Header: \setbeamertemplate{navigation symbols}{}
#+Latex_Header: \setbeamertemplate{title page}[plain]
#+Latex_Header: \setbeamertemplate{footline}[frame number]

## Styling
#+Latex_Header: \setsansfont[Mapping=tex-text]{Georgia}
#+Latex_Header: \setmonofont[Mapping=tex-text]{Ubuntu Mono}

#+Latex_Header: \definecolor{Backdrop}{RGB}{53, 49, 41}
#+Latex_Header: \definecolor{Foreground}{RGB}{238, 238, 238}
#+Latex_Header: \definecolor{Ecogreen}{RGB}{139, 200, 75}
#+Latex_Header: \definecolor{Lime}{RGB}{195, 204, 136}
#+Latex_Header: \definecolor{Grue}{RGB}{185, 204, 197}

#+Latex_Header: \definecolor{Tangerine}{RGB}{223, 135, 47}
#+Latex_Header: \definecolor{Tinkerbell}{RGB}{220, 220, 204}
#+Latex_Header: \definecolor{Liloo}{RGB}{161, 219, 219}
#+Latex_Header: \definecolor{Waterose}{RGB}{204, 147, 147}

#+Latex_Header: \usecolortheme[named=Backdrop]{structure}
#+Latex_Header: \setbeamercolor{normal text}{fg=Foreground, bg=Backdrop}
#+Latex_Header: \setbeamercolor{frametitle}{fg=Ecogreen, bg=Backdrop}
#+Latex_Header: \setbeamerfont{title}{series=\bfseries}
#+Latex_Header: \setbeamercolor{title}{fg=Ecogreen, bg=Backdrop}
#+Latex_Header: \setbeamercolor{item}{fg=Lime}
#+Latex_Header: \setbeamercolor{section in toc}{fg=Ecogreen}
#+Latex_Header: \setbeamerfont{footline}{size=\small}

#+Latex_Header: \setbeamertemplate{items}[circle]
#+Latex_Header: \setbeamertemplate{sections/subsections in toc}[circle]

#+Latex_Header: \setbeamertemplate{blocks}[rounded][shadow=true]
#+Latex_Header: \setbeamercolor{block title}{fg=Grue, bg=Backdrop!105}
#+Latex_Header: \setbeamercolor{block body}{fg=Foreground, bg=Backdrop!95}

#+Latex_Header: \setbeamercolor{button}{fg=Foreground, bg=Lime}
#+Latex_Header: \setbeamerfont{button}{size=\normal}
#+Latex_Header: \renewcommand{\insertgotosymbol}{$\blacktriangleright$  }

#+Latex_Header: \setbeamercolor{alerted text}{fg=Lime}

#+Latex_Header: \hypersetup{colorlinks,linkcolor=, urlcolor=Lime}

## Do not number title page frame.
#+Bind: org-export-latex-title-command "\\thispagestyle{empty}\\maketitle"

## Code listings
#+Latex_Header: \usepackage{listings}

#+Latex_Header: \lstdefinestyle{node}{
#+Latex_Header: basicstyle=\ttfamily\small,
#+Latex_Header: tabsize=3, columns=fullflexible, keepspaces=true,
#+Latex_Header: breaklines=false, showstringspaces=false, xleftmargin=5pt,
#+Latex_Header: aboveskip=0pt, belowskip=0pt,
#+Latex_Header: keywordstyle=\color{Lime}\bfseries, stringstyle=\color{Grue}
#+Latex_Header: }
#+Latex_Header: \lstset{style=node}

#+Latex_Header: \lstdefinelanguage{js}{
#+Latex_Header: morekeywords={var, function}
#+Latex_Header: , sensitive=false
#+Latex_Header: , morecomment=[l]//
#+Latex_Header: , morecomment=[s]{/*}{*/}
#+Latex_Header: , morestring=[b]"
#+Latex_Header: , morestring=[b]'
#+Latex_Header: }
#+Latex_Header: \lstdefinelanguage{html-js}[]{js}{morekeywords={script, src}}

#+Latex_Header: \newcommand{\codeinput}[3]{\begin{block}{#3}{\lstinputlisting[language=#1]{#2}}\end{block}}
#+Latex_Header: \newcommand{\codeinline}[2]{\begin{block}{#1}{\ttfamily#2}\end{block}}
#+Latex_Header: \newcommand{\code}[1]{\textcolor{Grue}{\lstinline{#1}}}

## Make fragile frame when using lstlisting environment.
#+Latex_Header:
#+Bind: org-beamer-fragile-re "^[ \t]*\\\\begin{\\(lstlisting\\|verbatim\\)}"

## Graphisc
#+Latex_Header: \usepackage{tikz}

#+begin_src emacs-lisp :results org :exports none
  (format "#+Latex_Header: \\newcommand{\\localip}{%s}"
          (or (format-network-address
               (or (car (network-interface-info "eth0"))
                   (car (network-interface-info "wlan0")))
               t)
              "localhost"))
#+end_src

#+results:
#+BEGIN_ORG
#+Latex_Header: \newcommand{\localip}{192.168.1.6}
#+END_ORG

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Begin document

## Org beamer inserts title frame automatically, reset
## frame counter.
#+Beamer: \setcounter{framenumber}{0}

## Print outline when changing section.
#+BEGIN_lateX
\AtBeginSection[] {
  \thispagestyle{empty}
  \addtocounter{framenumber}{-1}
  \begin{frame}<beamer>{}
    \vspace{2.7em}
    \tableofcontents[currentsection]
  \end{frame}
}
#+END_lateX

## Introduction frame.
#+BEGIN_lateX
\begin{frame}{Introduction}
  \thispagestyle{empty}
  \begin{center}
    \includegraphics[width=6cm]{img/node-logo.png}
    \includegraphics[width=2.5cm]{img/html5-logo.png}
  \end{center}
\end{frame}
#+END_latex

## Reset frame count after intro
#+Begin_latex
\setcounter{framenumber}{0}
#+End_latex

* Node et compagnie
** Node
*** Node \\ Description
	 http://nodejs.org/

	 #+Latex: \vfill

	 Serveur :
	 - événementiel,
	 - asynchrone,
	 - en JavaScript.

	 Intérêts :
	 - Language identique client/serveur
	 - Performance élevée (100 000+ connexions simultanées)
	 - API réseau élémentaire
	 - Riche librairie de modules

	 Similaire à Twisted ou EventMachine

*** Node \\ Serveur événementiel
	 Reçoit des événements et y répond
	 - Semblable au DOM et à jQuery
	 - Fortement adapté aux applications réseau
	 - Approche dynamique

	 #+Latex: \codeinput{js}{examples/event.js}{}

*** Node \\ Serveur asynchrone
	 Approche non-bloquante :
	 - Entrées/sorties asynchrones (/epoll/, /kqueue/, ...)
	 - Le processus dort en attendant les événements
	 - Aucun /thread/, un seul processus (/fork/ possible)
	 - Plus simple à programmer

	 Inconvénient :
	 - Éviter les appels bloquants trop longs

*** Node \\ Serveur en JavaScript
	 Utilise le moteur JavaScript V8 de Google (Ecma-262 édition 5)

	 #+Latex: \vfill

	 Avantages du JavaScript côté serveur :
	 - Adapté au modèle événementielle
	 - Fonctionnalités asynchrones incluses
	 - Simplifie les échanges client-serveur
	 - Partage de code possible

*** Node \\ Installation manuelle
	 Prérequis:
	 #+Latex: \codeinput{bash}{examples/git-deps.sh}{}

	 #+Latex: \vfill

	 Dépôt officiel : http://github.com/joyent/node/
	 #+Latex: \codeinput{bash}{examples/git-install.sh}{}

*** Node \\ Exemple 1
	 #+Latex: \codeinput{js}{examples/echo-server.js}{Serveur écho}

*** Node \\ Exemple 2
	 #+Latex: \codeinput{js}{examples/http-server.js}{Serveur HTTP}

	 #+Latex: \vfill

	 #+Latex: \codeinline{}{ab -n 1000 -c 1000 http://\localip:1337/}

*** Node \\ Exemple 3
	 #+Latex: \codeinput{js}{examples/http-server-blocking.js}{Serveur HTTP bloquant}

	 #+Latex: \vfill

	 #+Latex: \codeinline{}{ab -n 1000 -c 1000 http://\localip:1337/}

*** Node \\ Exemple 4
	 #+Latex: \codeinput{js}{examples/node-chat.js}{Serveur chat TCP}

** Express
*** Express \\ Description
	 http://expressjs.com/

	 #+Latex: \vfill

	 Fonctionnalités essentielles pour des serveurs web :
	 - Routes et verbes HTTP
	 - Authentification
	 - Gestion de session
	 - Support des templates HTML (Haml, Jade, ...)
	 - Cache automatique
	 - etc.

*** Express \\ Exemple 1
	 #+Latex: \codeinput{js}{examples/express-create.js}{Création d'un serveur}

	 #+Latex: \vfill

	 #+Latex: \codeinline{}{curl http://\localip:1337/}

*** Express \\ Exemple 2
	 Chemins basés sur des /regexps/

	 #+begin_latex
	 \begin{block}{Routes}
	 \lstinputlisting[language=js, firstline=5, lastline=11]{examples/express-routing.js}
	 \end{block}
	 #+end_latex

	 #+Latex: \vfill

	 #+begin_latex
	 \begin{block}{}
	 \texttt{curl http://\localip:1337/potion/love}
	 \\
	 \texttt{curl http://\localip:1337/spell/fire/meteor}
	 \end{block}
	 #+end_latex

** npm
*** npm \\ Description
	 http://npmjs.org/

	 #+Latex: \vfill

	 \alert{n}ode \alert{p}ackage \alert{m}anager

	 - Installe et met à jour des modules pour node
	 - Recherche de modules par description, mots-clés
	 - Gère les dépendances automagiquement
	 - Aide au développement de modules

	 #+Latex: \vfill
	 #+Latex: \codeinput{bash}{examples/npm-install.sh}{Installation}

*** npm \\ Utilisation
	 Installer un module
	 #+begin_latex
	 \begin{block}{}
	 \lstinputlisting[language=js, firstline=1, lastline=1]{examples/npm-usage.sh}
	 \end{block}
	 #+end_latex

	 Installation locale par défaut :
	 #+begin_latex
      \begin{block}{}
      \begin{verbatim}
 $ tree -dL 2 node_modules/
 node_modules/
 └── express
     ├── bin
     ├── lib
     ├── node_modules
     └── testing\end{verbatim}
      \end{block}
	 #+end_latex

	 - Versions différentes pour chaque projet
	 - Binaires disséminés

*** npm \\ Utilisation
	 À chaque paquet sa description en JSON :

	 #+Latex: \codeinput{js}{examples/package.json}{package.json}

*** npm \\ Utilisation
	 Installer et mettre à jour toutes les dépendances du projet courant
	 #+begin_latex
	 \begin{block}{}
	 \lstinputlisting[language=js, firstline=2, lastline=3]{examples/npm-usage.sh}
	 \end{block}
	 #+end_latex

	 #+Latex: \vfill

	 Charger le projet courant sur le \code{NODE\_PATH}
	 #+begin_latex
	 \begin{block}{}
	 \lstinputlisting[language=js, firstline=4, lastline=4]{examples/npm-usage.sh}
	 \end{block}
	 #+end_latex

	 #+Latex: \vfill

	 À vous la gloire !
	 #+begin_latex
	 \begin{block}{}
	 \lstinputlisting[language=js, firstline=5, lastline=6]{examples/npm-usage.sh}
	 \end{block}
	 #+end_latex

*** Node et compagnie \\ Ressources et documentation

	 Node :
	 - http://nodejs.org/
	 - http://github.com/joyent/node/wiki/
	 - http://nodejs.org/docs/v0.4.12/api/
	 - http://howtonode.org/

	 Express :
	 - http://expressjs.com/
	 - http://expressjs.com/guide.html
	 - http://github.com/visionmedia/express/wiki

	 npm :
	 - http://npmjs.org/
	 - \code{`man npm`}

* HTML5

** WebSocket et Socket.IO
*** Protocole WebSocket \\ Description
	 Communication bidirectionnelle persistante :
	 - Réponse du standard aux techniques Comet
	 - Rend obsolètes HTTP /long-polling/ et HTTP /streaming/
	 - Véritable /full-duplex/ entre client et serveur HTTP
	 - Utilise la connexion TCP créée pour une requête HTTP

	 #+Latex: \vfill

	 Communication efficace :
	 - Idéal pour recevoir des notifications du serveur
	 - Meilleure solution pour des applications temps-réel (bourse,
      jeux, ...)

*** Socket.IO \\ Description
	 Module pour node qui implémente différentes techniques pour une
	 connexion /full-duplex/ :
	 - WebSocket
	 - Flash socket
	 - HTTP /long-polling/ et /streaming/
	 - ...

	 Choisit la meilleure méthode supportée par le navigateur

	 #+Latex: \vfill

	 Ajoute des fonctionnalités utiles :
	 - /Heartbeats/, /timeouts/
	 - /Namespaces/
	 - /Acknowledgments/

*** Socket.IO \\ Utilisation
	 Partie serveur avec Express :
	 #+begin_latex
      \begin{block}{}
      \lstinputlisting[language=js, firstline=1, lastline=11]{examples/socket-io-server.js}
      \end{block}
	 #+end_latex

*** Socket.IO \\ Utilisation
	 Partie client :
	 #+begin_latex
    \begin{block}{}
    \lstinputlisting[language=html-js, firstline=4, lastline=11]{examples/socket-io-client.html}
    \end{block}
	 #+end_latex

** Canvas HTML
*** Canvas HTML \\ Description
	 Élément <canvas> :
	 - Dessin et animation sur une page web
	 - Contextes 2d et 3d (WebGL)
	 - Implémenté dans les navigateurs majeurs

	 Alternative aux SVG plus performante :
	 - Surface /bitmapped/ plutôt que vectorielle
	 - Pas d'insertion dans le DOM
	 - Accélération matérielle possible

*** Canvas HTML \\ Utilisation

	 #+begin_latex
      \begin{block}{HTML}
      \lstinputlisting[language=html, firstline=9, lastline=11]{examples/canvas.html}
      \end{block}
	 #+end_latex

	 #+begin_latex
      \begin{block}{JavaScript}
      \lstinputlisting[language=js, firstline=2, lastline=3]{examples/canvas.js}
      \end{block}
	 #+end_latex

*** Canvas HTML \\ Exemple 1

	 #+begin_latex
      \begin{columns}
      \begin{column}{0.5\textwidth}
      \begin{block}{Remplissage de zone}
      \lstinputlisting[language=js, firstline=8, lastline=9,
        xleftmargin=-5pt,
        basicstyle=\ttfamily\scriptsize]{examples/canvas2.js}
      \end{block}

      \begin{block}{Contour de zone}
        \lstinputlisting[language=js, firstline=11, lastline=12,
        xleftmargin=-5pt,
        basicstyle=\ttfamily\scriptsize]{examples/canvas2.js}
      \end{block}

      \begin{block}{Tracé}
        \lstinputlisting[language=js, firstline=14, lastline=20,
        xleftmargin=-5pt,
        basicstyle=\ttfamily\scriptsize]{examples/canvas2.js}
      \end{block}
      \end{column}

      \begin{column}{0.5\textwidth}

      \begin{center}
      \includegraphics[angle=-90, width=2.25cm]{img/canvas-ex2.png}
      \end{center}
      \end{column}
      \end{columns}
	 #+end_latex

*** Canvas HTML \\ Exemple 2
    #+Begin_latex
      \begin{columns}
      \begin{column}{0.51\textwidth}
      \begin{block}{}
      \lstinputlisting[language=js, firstline=4, lastline=20,
        xleftmargin=-5pt,
        basicstyle=\ttfamily\scriptsize]{examples/canvas.js}
      \end{block}
      \end{column}

      \begin{column}{0.5\textwidth}
      \begin{center}
      \includegraphics[width=\textwidth]{img/canvas-ex1.png}
      \end{center}
      \end{column}
      \end{columns}
    #+End_latex

* Exercice
** Présentation
*** Démonstration
	#+begin_latex
	\begin{center}
   \includegraphics[width=6cm]{img/multicanvas.png}
	\end{center}

   \begin{center}
   \tikz \node [draw=none, fill=Lime!50!black, inner sep=1.5mm, rounded corners=2.5mm]
   {$\blacktriangleright$ \url{http://\localip:8080/}};
   \end{center}
	#+end_latex

** Couleurs
*** Couleurs \\ Modèle HSL
    #+begin_latex
	 \begin{columns}
	 \begin{column}{0.5\textwidth}
    \begin{center}
	 \includegraphics[width=4cm]{img/hsl.png}
    \end{center}
	 \end{column}

    \begin{column}{0.5\textwidth}
	 #+end_latex
	 HSL :
	 - \alert{H}ue (0 <= H < 360)
	 - \alert{S}aturation (%)
	 - \alert{L}uminance (%)
	 #+begin_latex
    \end{column}
    \end{columns}
    #+end_latex

	 #+Latex: \vfill

	 Dans notre application :
	 - Chaque client a une teinte différente
	 - Saturation et luminance fixée

*** Couleurs \\ Synchronisation
    #+begin_latex
	 \begin{columns}[t]
	 \begin{column}{0.5\textwidth}
	 #+end_latex

    Données serveur :
    #+Latex: \codeinput{js}{examples/donnees_serveur.js}{}

	 Connexion :
	 - Attribution d'une teinte et broadcast

	 Déconnexion :
	 - Suppression de la teinte et broadcast

	 #+begin_latex
	 \end{column}
    \begin{column}{0.5\textwidth}
	 #+end_latex

	 Données client :
    #+Latex: \codeinput{js}{examples/donnees_client.js}{}

	 Connexion :
	 - Réception et enregistrement de la teinte

    Déconnexion :
	 - Suppression des données liées aux clients

	 #+begin_latex
	 \end{column}
	 \end{columns}
	 #+end_latex

** Tracé
*** Tracé \\ Segment par segment
	 #+begin_latex
	 \begin{center}
    \includegraphics[width=5cm]{img/line.png}
    \includegraphics[width=5cm]{img/line2.png}
	 \end{center}
	 #+end_latex

	 Comment communiquer un tracé ?
	 - Un tracé = plusieurs segments
	 - Une propriété du canvas (\code{lineCap}) permet d'adoucir les traits
	 - On transmet en continu le dernier segment tracé par la souris

*** Tracé \\ Synchronisation
	 Un client local :
	 - Surveille les événements \code{mousedown} et \code{mouseup}
	 - Enregistre la position $p$ du curseur à chaque \code{mousemove}
	 - ($p_{t-1}$, $p_{t}$) = segment
	 - Dessine le segment sur le canvas
	 - Transmet le segment au serveur

	 Le serveur :
	 - Broadcast le segment à tous les autres clients

	 Un client distant :
	 - Reçoit le segment et l'identifiant du dessinateur
	 - Détermine la teinte du segment
	 - Dessine le segment sur son canvas

** À vous
*** Démarrage
	 Pour récupérer le squelette du projet :
	 #+Latex: \codeinput{sh}{examples/exercise-setup.sh}{}

	 #+Latex: \vfill

	 A vous de jouer !

*** Ressources et documentation

	 Canvas :
	 - http://developer.mozilla.org/en/HTML/Canvas
	 - http://developer.mozilla.org/en/Canvas_tutorial
	 - http://dev.opera.com/articles/view/html-5-canvas-the-basics/

	 Socket.IO
	 - http://socket.io
	 - http://github.com/learnboost/socket.io/wiki/
